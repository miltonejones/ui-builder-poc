<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="DELETE">
        <includes/>
        <macroponent display_value="">ef2effe2ad29a1103b5e8874b67d0084</macroponent>
        <name>Update comments</name>
        <preset/>
        <required_translations>[ {
  "code" : null,
  "message" : "Comment deleted.",
  "comment" : ""
}, {
  "code" : null,
  "message" : "Comment posted.",
  "comment" : ""
}, {
  "code" : null,
  "message" : "You have reached the daily limit for feedback posted by a user.",
  "comment" : ""
} ]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
function handler({
    api,
    event,
    helpers,
    imports
}) {
    let done = false;
    let itemPath = [];

    const getPath = (items, pid, level) => {
        for (let i = 0; i < items.length; i++) {
            if (!done) {
                itemPath.length = level;

                if (items[i].id == pid) {
                    itemPath.push(i);
                    done = true;
                    return;
                } else {
                    if (items[i].children && items[i].children.length > 0) {
                        itemPath.push(i);
                        getPath(items[i].children, pid, level + 1);
                    }
                }
            } else return;
        }
    };

    const getStringPath = (path, key) => {
        let actualPath = "";

        for (let i = 0; i < path.length - 1; i++) {
            actualPath += `[${path[i]}].children`;
        }

        if (path.length != 0 && key)
            actualPath += `[${path[path.length - 1]}].${key}`;
        else if (path.length != 0)
            actualPath += `[${path[path.length - 1]}]`;

        return actualPath;
    };

    /**
     * Alternative method to lodash _.get()
     */
    const get = (obj, path) => {
        if (!path)
            return undefined;

        const pathArray = Array.isArray(path) ? path : path.match(/([^[.\]])+/g);

        return (
            pathArray.reduce((prevObj, key) => prevObj && prevObj[key], obj)
        );
    };

    /**
     * Alternative method to lodash _.set()
     */
    const set = (obj, path, value) => {
        const pathArray = Array.isArray(path) ? path : path.match(/([^[.\]])+/g);

        pathArray.reduce((acc, key, i) => {
            if (acc[key] === undefined) acc[key] = {};
            if (i === pathArray.length - 1) acc[key] = value;
            return acc[key];
        }, obj);
    };

    /**
     * Alternative method to lodash _.unset()
     */
    const unset = (obj, path) => {
        const pathArray = Array.isArray(path) ? path : path.match(/([^[.\]])+/g);

        pathArray.reduce((acc, key, i) => {
            if (i === pathArray.length - 1) {
                acc.splice(key, 1);
            }
            return acc[key];
        }, obj);
    };

    const put = function(obj, path, val) {
        var stringToPath = function(path) {
            if (typeof path !== 'string')
                return path;

            var output = [];

            path.split('.').forEach(function(item, index) {
                item.split(/\[([^}]+)\]/g).forEach(function(key) {
                    if (key.length > 0) {
                        output.push(key);
                    }
                });
            });

            return output;
        };

        path = stringToPath(path);

        var length = path.length;
        var current = obj;

        path.forEach(function(key, index) {
            if (index === length - 1) {
                current[key].unshift(val);
            } else {
                if (!current[key]) {
                    current[key] = {};
                }

                current = current[key];
            }
        });
    };

    if (event.elementId == 'get_article_details_1' && event.name == 'DATA_FETCH_SUCCEEDED') {
        if (api.data.get_article_details_1.articleDetails.showFeedbackComments) {
            api.setState('articleId', api.context.props.sysId);
        }
    } else if (event.elementId == 'retrieve_knowledge_comments' && event.name == 'DATA_FETCH_SUCCEEDED') {
        let comments = api.data.retrieve_knowledge_comments.knowledgeComments;

        if (comments) {
            api.setState('comments', comments);
        }
    } else if (event.elementId == 'insert_knowledge_comment' && event.name == 'DATA_OP_SUCCEEDED') {
        let data = JSON.parse(event.payload.data.output.data.AppKnowledge_Mutation.addComment);

        if (data.sys_id) {
            helpers.translate('Comment posted.').then((value) => {
                api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
                    items: [{
                        id: "submitCommentAlert",
                        status: "info",
                        icon: "info-circle-outline",
                        content: value,
                        action: {
                            type: "dismiss"
                        }
                    }],
                });
            });

            let comment = {
                'id': data.sys_id,
                'parent': data.parent,
                'children': data.children,
                'created': data.created_on,
                'text': data.comment_text,
                'user': {
                    'name': data.user.name,
                    'id': data.user.sys_id,
                    'avatar': data.user.avatar
                },
                'reactionCount': 0,
                'isReacted': false
            };

            let comments = api.state.comments;

            if (comment.parent) {
                getPath(comments, comment.parent, 0);

                if (done && itemPath.length > 0) {
                    api.setState('comments', []);

                    put(comments, getStringPath(itemPath, 'children'), comment);

                    api.setState('comments', comments);
                    done = false;
                    itemPath = [];
                }
            } else {
                api.setState('comments', []);
                comments.unshift(comment);
                api.setState('comments', comments);
            }
        } else {
            helpers.translate('You have reached the daily limit for feedback posted by a user.').then((value) => {
                api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
                    items: [{
                        id: "commentLimitAlert",
                        status: "critical",
                        icon: "info-circle-outline",
                        content: value,
                        action: {
                            type: "dismiss"
                        }
                    }],
                });
            });
        }
    } else if (event.elementId == 'delete_knowledge_comment' && event.name == 'DATA_OP_SUCCEEDED') {
        let comments = api.state.comments;
        let currentCommentId = api.state.currentCommentId;

        if (currentCommentId != null) {
            getPath(comments, currentCommentId, 0);
            
            if (done && itemPath.length > 0) {
                api.setState('comments', []);
                let index = itemPath[0];

                if (itemPath.length <= 1) {
                    comments.splice(index, 1);
                } else {
                    unset(comments, getStringPath(itemPath, null));
                }

                api.setState('comments', comments);
                done = false;
                itemPath = [];
            }

            helpers.translate('Comment deleted.').then((value) => {
                api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
                    items: [{
                        id: "deleteCommentAlert",
                        status: "info",
                        icon: "info-circle-outline",
                        content: value,
                        action: {
                            type: "dismiss"
                        }
                    }],
                });
            });
        }
    } else if (event.elementId == 'like_knowledge_comment' && event.name == 'DATA_OP_SUCCEEDED') {
        let comments = api.state.comments;
        let currentCommentId = api.state.currentCommentId;

        if (currentCommentId != null) {
            getPath(comments, currentCommentId, 0);

            if (done && itemPath.length > 0) {
                api.setState('comments', []);
                let path = getStringPath(itemPath, "");
                let reactionCount = get(comments, `${path}.reactionCount`);

                set(comments, `${path}.reactionCount`, reactionCount + 1);
                set(comments, `${path}.isReacted`, true);

                api.setState('comments', comments);
                done = false;
                itemPath = [];
            }
        }
    } else if (event.elementId == 'unlike_knowledge_comment' && event.name == 'DATA_OP_SUCCEEDED') {
        let comments = api.state.comments;
        let currentCommentId = api.state.currentCommentId;

        if (currentCommentId != null) {
            getPath(comments, currentCommentId, 0);

            if (done && itemPath.length > 0) {
                api.setState('comments', []);
                let path = getStringPath(itemPath, "");
                let reactionCount = get(comments, `${path}.reactionCount`);

                set(comments, `${path}.reactionCount`, reactionCount - 1);
                set(comments, `${path}.isReacted`, false);

                api.setState('comments', comments);
                done = false;
                itemPath = [];
            }
        }
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>system</sys_created_by>
        <sys_created_on>2023-03-16 14:34:56</sys_created_on>
        <sys_id>e72effe2ab29a110f59b9890697c1c83</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update comments</sys_name>
        <sys_package display_value="Voluntary Deductions" source="x_ebh_voluntary_0">591c37a24729a110265ad698436d431e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Voluntary Deductions">591c37a24729a110265ad698436d431e</sys_scope>
        <sys_update_name>sys_ux_client_script_e72effe2ab29a110f59b9890697c1c83</sys_update_name>
        <sys_updated_by>system</sys_updated_by>
        <sys_updated_on>2023-03-16 14:34:56</sys_updated_on>
        <target/>
        <type/>
    </sys_ux_client_script>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Voluntary Deductions">591c37a24729a110265ad698436d431e</application>
        <file_path/>
        <instance_id>83ce67badb169190b847ac44d4961903</instance_id>
        <instance_name>employbridgedev</instance_name>
        <name>sys_ux_client_script_e72effe2ab29a110f59b9890697c1c83</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ux_client_script"&gt;&lt;sys_ux_client_script action="INSERT_OR_UPDATE"&gt;&lt;includes/&gt;&lt;macroponent display_value=""&gt;ef2effe2ad29a1103b5e8874b67d0084&lt;/macroponent&gt;&lt;name&gt;Update comments&lt;/name&gt;&lt;preset/&gt;&lt;required_translations&gt;[ {
  "code" : null,
  "message" : "Comment deleted.",
  "comment" : ""
}, {
  "code" : null,
  "message" : "Comment posted.",
  "comment" : ""
}, {
  "code" : null,
  "message" : "You have reached the daily limit for feedback posted by a user.",
  "comment" : ""
} ]&lt;/required_translations&gt;&lt;script&gt;&lt;![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
function handler({
    api,
    event,
    helpers,
    imports
}) {
    let done = false;
    let itemPath = [];

    const getPath = (items, pid, level) =&gt; {
        for (let i = 0; i &lt; items.length; i++) {
            if (!done) {
                itemPath.length = level;

                if (items[i].id == pid) {
                    itemPath.push(i);
                    done = true;
                    return;
                } else {
                    if (items[i].children &amp;&amp; items[i].children.length &gt; 0) {
                        itemPath.push(i);
                        getPath(items[i].children, pid, level + 1);
                    }
                }
            } else return;
        }
    };

    const getStringPath = (path, key) =&gt; {
        let actualPath = "";

        for (let i = 0; i &lt; path.length - 1; i++) {
            actualPath += `[${path[i]}].children`;
        }

        if (path.length != 0 &amp;&amp; key)
            actualPath += `[${path[path.length - 1]}].${key}`;
        else if (path.length != 0)
            actualPath += `[${path[path.length - 1]}]`;

        return actualPath;
    };

    /**
     * Alternative method to lodash _.get()
     */
    const get = (obj, path) =&gt; {
        if (!path)
            return undefined;

        const pathArray = Array.isArray(path) ? path : path.match(/([^[.\]])+/g);

        return (
            pathArray.reduce((prevObj, key) =&gt; prevObj &amp;&amp; prevObj[key], obj)
        );
    };

    /**
     * Alternative method to lodash _.set()
     */
    const set = (obj, path, value) =&gt; {
        const pathArray = Array.isArray(path) ? path : path.match(/([^[.\]])+/g);

        pathArray.reduce((acc, key, i) =&gt; {
            if (acc[key] === undefined) acc[key] = {};
            if (i === pathArray.length - 1) acc[key] = value;
            return acc[key];
        }, obj);
    };

    /**
     * Alternative method to lodash _.unset()
     */
    const unset = (obj, path) =&gt; {
        const pathArray = Array.isArray(path) ? path : path.match(/([^[.\]])+/g);

        pathArray.reduce((acc, key, i) =&gt; {
            if (i === pathArray.length - 1) {
                acc.splice(key, 1);
            }
            return acc[key];
        }, obj);
    };

    const put = function(obj, path, val) {
        var stringToPath = function(path) {
            if (typeof path !== 'string')
                return path;

            var output = [];

            path.split('.').forEach(function(item, index) {
                item.split(/\[([^}]+)\]/g).forEach(function(key) {
                    if (key.length &gt; 0) {
                        output.push(key);
                    }
                });
            });

            return output;
        };

        path = stringToPath(path);

        var length = path.length;
        var current = obj;

        path.forEach(function(key, index) {
            if (index === length - 1) {
                current[key].unshift(val);
            } else {
                if (!current[key]) {
                    current[key] = {};
                }

                current = current[key];
            }
        });
    };

    if (event.elementId == 'get_article_details_1' &amp;&amp; event.name == 'DATA_FETCH_SUCCEEDED') {
        if (api.data.get_article_details_1.articleDetails.showFeedbackComments) {
            api.setState('articleId', api.context.props.sysId);
        }
    } else if (event.elementId == 'retrieve_knowledge_comments' &amp;&amp; event.name == 'DATA_FETCH_SUCCEEDED') {
        let comments = api.data.retrieve_knowledge_comments.knowledgeComments;

        if (comments) {
            api.setState('comments', comments);
        }
    } else if (event.elementId == 'insert_knowledge_comment' &amp;&amp; event.name == 'DATA_OP_SUCCEEDED') {
        let data = JSON.parse(event.payload.data.output.data.AppKnowledge_Mutation.addComment);

        if (data.sys_id) {
            helpers.translate('Comment posted.').then((value) =&gt; {
                api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
                    items: [{
                        id: "submitCommentAlert",
                        status: "info",
                        icon: "info-circle-outline",
                        content: value,
                        action: {
                            type: "dismiss"
                        }
                    }],
                });
            });

            let comment = {
                'id': data.sys_id,
                'parent': data.parent,
                'children': data.children,
                'created': data.created_on,
                'text': data.comment_text,
                'user': {
                    'name': data.user.name,
                    'id': data.user.sys_id,
                    'avatar': data.user.avatar
                },
                'reactionCount': 0,
                'isReacted': false
            };

            let comments = api.state.comments;

            if (comment.parent) {
                getPath(comments, comment.parent, 0);

                if (done &amp;&amp; itemPath.length &gt; 0) {
                    api.setState('comments', []);

                    put(comments, getStringPath(itemPath, 'children'), comment);

                    api.setState('comments', comments);
                    done = false;
                    itemPath = [];
                }
            } else {
                api.setState('comments', []);
                comments.unshift(comment);
                api.setState('comments', comments);
            }
        } else {
            helpers.translate('You have reached the daily limit for feedback posted by a user.').then((value) =&gt; {
                api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
                    items: [{
                        id: "commentLimitAlert",
                        status: "critical",
                        icon: "info-circle-outline",
                        content: value,
                        action: {
                            type: "dismiss"
                        }
                    }],
                });
            });
        }
    } else if (event.elementId == 'delete_knowledge_comment' &amp;&amp; event.name == 'DATA_OP_SUCCEEDED') {
        let comments = api.state.comments;
        let currentCommentId = api.state.currentCommentId;

        if (currentCommentId != null) {
            getPath(comments, currentCommentId, 0);
            
            if (done &amp;&amp; itemPath.length &gt; 0) {
                api.setState('comments', []);
                let index = itemPath[0];

                if (itemPath.length &lt;= 1) {
                    comments.splice(index, 1);
                } else {
                    unset(comments, getStringPath(itemPath, null));
                }

                api.setState('comments', comments);
                done = false;
                itemPath = [];
            }

            helpers.translate('Comment deleted.').then((value) =&gt; {
                api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
                    items: [{
                        id: "deleteCommentAlert",
                        status: "info",
                        icon: "info-circle-outline",
                        content: value,
                        action: {
                            type: "dismiss"
                        }
                    }],
                });
            });
        }
    } else if (event.elementId == 'like_knowledge_comment' &amp;&amp; event.name == 'DATA_OP_SUCCEEDED') {
        let comments = api.state.comments;
        let currentCommentId = api.state.currentCommentId;

        if (currentCommentId != null) {
            getPath(comments, currentCommentId, 0);

            if (done &amp;&amp; itemPath.length &gt; 0) {
                api.setState('comments', []);
                let path = getStringPath(itemPath, "");
                let reactionCount = get(comments, `${path}.reactionCount`);

                set(comments, `${path}.reactionCount`, reactionCount + 1);
                set(comments, `${path}.isReacted`, true);

                api.setState('comments', comments);
                done = false;
                itemPath = [];
            }
        }
    } else if (event.elementId == 'unlike_knowledge_comment' &amp;&amp; event.name == 'DATA_OP_SUCCEEDED') {
        let comments = api.state.comments;
        let currentCommentId = api.state.currentCommentId;

        if (currentCommentId != null) {
            getPath(comments, currentCommentId, 0);

            if (done &amp;&amp; itemPath.length &gt; 0) {
                api.setState('comments', []);
                let path = getStringPath(itemPath, "");
                let reactionCount = get(comments, `${path}.reactionCount`);

                set(comments, `${path}.reactionCount`, reactionCount - 1);
                set(comments, `${path}.isReacted`, false);

                api.setState('comments', comments);
                done = false;
                itemPath = [];
            }
        }
    }
}]]&gt;&lt;/script&gt;&lt;script_api_version&gt;2.0.0&lt;/script_api_version&gt;&lt;sys_class_name&gt;sys_ux_client_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;system&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-03-16 14:34:56&lt;/sys_created_on&gt;&lt;sys_id&gt;e72effe2ab29a110f59b9890697c1c83&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;Update comments&lt;/sys_name&gt;&lt;sys_package display_value="Voluntary Deductions" source="x_ebh_voluntary_0"&gt;591c37a24729a110265ad698436d431e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Voluntary Deductions"&gt;591c37a24729a110265ad698436d431e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ux_client_script_e72effe2ab29a110f59b9890697c1c83&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;system&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-03-16 14:34:56&lt;/sys_updated_on&gt;&lt;target/&gt;&lt;type/&gt;&lt;/sys_ux_client_script&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-2032115988</payload_hash>
        <record_name>Update comments</record_name>
        <reverted_from/>
        <source>c0311903c311211011971d4ce0013135</source>
        <source_table>sys_upgrade_history</source_table>
        <state>previous</state>
        <sys_created_by/>
        <sys_created_on>2023-03-05 05:00:20</sys_created_on>
        <sys_id>14a836554775e910265ad698436d437a</sys_id>
        <sys_mod_count/>
        <sys_recorded_at>186b02462a00000000</sys_recorded_at>
        <sys_updated_by/>
        <sys_updated_on/>
        <type>UX Client Script</type>
        <update_guid>d0a83655e775e91000a94e39b711e07a</update_guid>
        <update_guid_history>d0a83655e775e91000a94e39b711e07a:-2032115988</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>vscode.user</sys_created_by>
        <sys_created_on>2023-03-24 22:34:19</sys_created_on>
        <sys_db_object display_value="" name="sys_ux_client_script">sys_ux_client_script</sys_db_object>
        <sys_id>88673b934b5144f490260a89b9729610</sys_id>
        <sys_metadata>e72effe2ab29a110f59b9890697c1c83</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update comments</sys_name>
        <sys_package display_value="Voluntary Deductions" source="x_ebh_voluntary_0">591c37a24729a110265ad698436d431e</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="Voluntary Deductions">591c37a24729a110265ad698436d431e</sys_scope>
        <sys_scope_delete display_value="">9010b0fe4941481f931beec4cfddca89</sys_scope_delete>
        <sys_update_name>sys_ux_client_script_e72effe2ab29a110f59b9890697c1c83</sys_update_name>
        <sys_update_version display_value="sys_ux_client_script_e72effe2ab29a110f59b9890697c1c83">14a836554775e910265ad698436d437a</sys_update_version>
        <sys_updated_by>vscode.user</sys_updated_by>
        <sys_updated_on>2023-03-24 22:34:19</sys_updated_on>
    </sys_metadata_delete>
</record_update>
