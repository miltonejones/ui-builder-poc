<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope) {
	
  var c = this;
	
	// in-scope reference for convenience;
  var machine; 
	
	$scope.talentNames  = c.data.talent;
	$scope.talentName   = '';
	$scope.accountParam = '';
	$scope.billingParam = ''; 
	
	 
	
 
  /**
   * Create the state machine.
   */
  invokeResource("loadAppJson", function (response) {
		 
		// get all the needed JSON objects from the database
		Object.keys(response.data.object).forEach(function(key) {
			$scope[key] = response.data.object[key];
		});
		
		
		// load tabs for the stepper component from the database
		var stepperTabs = response.data.object.stepper_tabs; 
    $scope.stepperTabs = stepperTabs;
    $scope.stepperStates = stepperTabs[0].complete.concat(stepperTabs[0].current);
		
		
    $scope.machine = response.data.object.state_machine;
		
		// add machine to 'page' scope for widget access
    $scope.page.machine = $scope.machine; 

    machine = $scope.machine; 
		
    // set machineState to the state machine initial state
    $scope.machineState = machine.initial;

    var app = createMachine({
      actions: createActions(),
      guards: createGuards(),
      services: createServices(),
			controller: c,
      $scope: $scope,
    }); 
		  
		
    $scope.page.can = app.can;
    $scope.page.send = app.send; 
    $scope.page.matches = app.matches; 

		
		
    // start the machine
    c.send("begin");
  });
	
	c.createDebugger = createDebugger;
	
	
	/**
	 * Finds talent based on a given value.
	 * support search for the talent name dropdown
	 * @param {string} value - The value to search for talent.
	 */
	c.findTalent = function (value) {
		// Invoke the 'findTalent' resource
		invokeResource('findTalent', function(res) { 
			// Set the talent names to the response data message
			$scope.talentNames = res.data.message;
		}, {
			// Set the parameter to the given value
			param: value
		});
	}
	
	/**
	 * Finds billing information based on a given value.
	 * support search for the landing page account list
	 * @param {string} value - The value to search for in the account name.
	 */
	c.findBilling = function (value) {
		// Invoke the "fetchLandingHistory" resource
		invokeResource("fetchLandingHistory", onListUpdate, {
			// Set the filter options for the resource
			filter: [
				{ 
					field: "account_number.account_name",
					value: value,
					operator: 'CONTAINS'
				},
				{
					field: "account_number"
				}
			]
		});
	}
    $scope.page.findBilling = c.findBilling; 

	/**
	 * Finds an account based on a given value.
	 * support search for the new misc billing account list
	 * @param {string} value - The value to search for.
	 */
	c.findAccount = function (value) { 
		// Invoke the 'findAccount' resource
		invokeResource('findAccount', onListUpdate, {
			// Pass the value as a parameter
			param: value
		});
	}

    $scope.page.openBilling = function (item) {
			c.send({ type: 'view', billing: item })
		} 
	
    $scope.page.findAccount = c.findAccount; 
  // create a simple watcher on machine.state to update the debugger UI
  $scope.$watch(
    "machineState",
    function (newValue, oldValue) {
      console.log('moving to state "%s" from "%s"', newValue, oldValue);
      localStorage.setItem('machine-state', newValue);
			if (!!machine) createDebugger();
    },
    true
  );

  return;

  // DATA CALL/RESPONSE

	/**
	 * Function to handle completion of an API response.
	 * @param {Object} response - The API response object.
	 */
	function onComplete(response) {
		// Check if the response has data and a message property
		if (response.data && response.data.message) {
			// Send a message with the data loaded event type and the message value
			return c.send({
				type: "data loaded",
				value: response.data.message,
			});
		}
	}
	
	/**
	 * Handles the response from a list update request.
	 * If the response contains a message, sends an update message with the message value.
	 * @param {Object} response - The response object from the list update request.
	 */
	function onListUpdate(response) {
		if (response.data && response.data.message) {			
			// the 'update' event tells the machine to update the account list on the screen
			return c.send({
				type: "update",
				value: response.data.message,
			});
		}
	}
	
  /**
   * Invokes a resource action with the given action name and options.
   * Calls the callback function with the response from the server.
   * @param {string} action - The name of the action to invoke.
   * @param {function} callback - The callback function to call with the server response.
   * @param {object} options - The options to pass to the action.
   */
  function invokeResource(action, callback, options) {
    var payload = { actionName: action };

    // If options are provided, add them to the payload object
    if (options) {
      Object.keys(options).forEach(function (key) {
        payload[key] = options[key];
      });
    }

    // Execute the function with the refreshed data
    // this will send a 'data loaded' message to the
    // state machine with the data response
    c.server.update().then(function () {
      c.server.get(payload)
				.then(callback);
    });
  }
	
  // ------------------------------------------------------------------------

  /**
   * ACTIONS/SERVICES/GUARDS
   *  - Actions modify machine.context values
   *  - Services invoke methods on external actors
   *  - Guards control conditional transitions
   */
	function createActions() {
		
		/**
			 * Assigns initial context values to a new object.
			 * @param {Object} context - The initial context object.
			 * @returns {Object} - An object containing the initial context values.
			 */
		function assignInitialContext(context) {
			// Create a new object to store the initial context values
			var initialContext = {};

			// Iterate over each key in the context object
			Object.keys(context).forEach(function(key) {
				// Assign the value of the current key to the initial context object
				initialContext[key] = context[key];
			});

			// Return an object containing the initial context values
			return {
				initialContext: initialContext
			};
		}
		
		return {
			assignInitialContext: assignInitialContext,
			
      updatePages: function (context, event) {
        // Get the ticket list from the context
         
        // Get the page number from the event, default to 1 if not provided
        var pageNum = event.pageNum || 1;

        // If there is no ticket list, return the context as is
        if (!context.accountList) {
          return ;
        }

        // Get the total number of records in the ticket list
        var recordCount = context.accountList.length;

        // Calculate the total number of pages based on the page size
        var pageCount = Math.ceil(recordCount / context.pageSize);

        // Calculate the starting index of the visible tickets based on the page number and page size
        var startNum = (pageNum - 1) * context.pageSize;

        // Get the visible tickets based on the starting index and page size
        var visible = context.accountList.slice(startNum, startNum + context.pageSize);
 
        // Return the updated context object with the current page number, record count, visible tickets, and page numbers
        
				
				return {
          currentPage: pageNum,
          recordCount: recordCount,
          visible: visible,
					columns: Object.keys(visible[0]).join(','),
          pages: getPages(pageNum, pageCount),
        };
      },
			
			/**
			 * Assigns pay codes to the dropdown map in the given context based on the provided event value.
			 * @param {Object} context - The context object containing the dropdown map.
			 * @param {Object} event - The event object containing the value for assigning pay codes.
			 * @returns {Object} - The updated context object with the assigned pay codes.
			 */
			assignPayCodes: function (context, event) {
				// Copy the dropdown map from the context object
				var dropdownMap = Object.assign({}, context.dropdownMap);

				// Map the event value to create an array of pay code objects
				var payCodes = event.value.map(function (item) {
					return {
						label: item.u_code + ' - ' + item.u_name,
						value: item.u_code
					};
				});

				// Assign the pay codes to the dropdown map
				dropdownMap.bill_type = payCodes;

				// Return the updated context object with the assigned pay codes
				return {
					dropdownMap: dropdownMap
				};
			}, 
			
			
			// adds a billing number to the parent record
      assignPreviousNumber: function (context, event) { 
				var record = event.value[0]; 
				
        // Map over the accountProps array in the context
        var accountProps = context.accountProps.map(function (item)  {
          // Check if the field is 'misc_billing_number'
          if (item.field === "misc_billing_number") {
						item.value = record.number;
						item.displayValue = record.number; 
          }
          return item;
        });

				return {
					accountProps: accountProps,
					billingProps: {
					  billing_parent: record.number,
						account_number: context.labelProps.account_id,
						currency: "USD",
						billing_type: "none",
					},
				}
			},

			
			resetDataList: function () {},
			resetBillingProps: function () {},
			
			resetAccountProps: function (context) { 
				var resetContext = {}
				Object.keys(context).forEach(function(key) {
					resetContext[key] = context.initialContext[key];
				})
				resetContext.initialContext = context.initialContext;
				return resetContext; 
			},
			
			assignBillingChange: function (context, event)  {
				
        // Map over the account properties and update the value of the matching field
        var accountProps = machine.context.accountProps.map(function(item)  {
          if (item.field === event.field) {
						item.value = event.value;
						item.displayValue = event.displayValue; 
          }
					
					// set a string 'talentName' for the read-only view
					 if (item.field === 'employee') {
						$scope.talentName = item.value;
          }
          return item;
        });

        var invalid = accountProps.find(function(prop)  {
					 return Boolean(prop.required) && !prop.value
				}); 
				
				console.log ({
					invalid: invalid
				})
				
        // Return the updated account properties
        return { accountProps: accountProps, invalid: invalid };
      },

      assignItemChange: function (context, event) {
        // Find the field definition for the given field
        var fieldDef = $scope.billing_fields.find(function (f) {
          return f.field === event.field;
        });

        // Update the property based on the field definition
        var updatedProp =
          fieldDef && fieldDef.currency ? Number(event.value).toFixed(2) : event.value;

        // Update the billing properties with the new value
        var billingProps = context.billingProps;
        billingProps[event.field] = updatedProp;

        // Calculate the total if both qty and bill_rate are present
        if (billingProps.qty && billingProps.bill_rate_amount) {
          billingProps.total_amount = Number(
            billingProps.qty * billingProps.bill_rate_amount
          ).toFixed(2);
        }

        // Check if any required billing fields are missing
        var invalidBilling = $scope.billing_fields.find(function (prop) {
          return Boolean(prop.required) && !context.billingProps[prop.field];
        });

        return {
          billingProps: billingProps,
          invalidBilling: invalidBilling,
        }; 
      },
			
			/**
			 * Assigns prior billing information to account properties.
			 * @param {Object} context - The context object containing account properties and billing information.
			 * @returns {Object} - The updated context object with assigned prior billing information.
			 */
			assignPriorBilling: function(context) {

				// Map through each account property
				var accountProps = context.accountProps.map(function(item) {
					// Check if billing information exists for the current account property
					if (context.billing[item.field]) {
						item.value = context.billing[item.field];
					}
					// Check if the current account property is 'misc_billing_number'
					if (item.field === 'misc_billing_number') {
						item.value = context.billing.number;
					}
					return item;
				});

				// Return the updated context object with assigned prior billing information
				return {
					accountProps: accountProps
				};
      },
						
			
			assignAccountData: function(_, event) {
		     // Get account fields from api state
        var account_fields = $scope.account_fields; 

        // Get the first record from look_up_records_1 results
        var record = event.value[0]
				
				if (!record) return ;

        // Map account form fields and assign values from record if available
        var accountProps = account_fields.map(function (item)  { 
          if (record[item.field]) {
						item.value = record[item.field]
          }
          return item;
        });

        // Create labelProps object with account_id and account_name values
        var labelProps = ["account_id", "account_name", "brand_name"].reduce(
          function(out, field)  {
            var prop = accountProps.find(function(f) {
							return f.field === field;
						});
            out[field] = prop.value;
            return out;
          },
          {}
        );
	 
        // Return updated context and event objects
        return { 
					accountProps: accountProps, 
					labelProps: labelProps 
				}; 
				
      },  
			
			assignPayCodeFilter:function (context, event)  {
        var bill_pay_filter;

        // Check the brand name in the context and assign the appropriate pay code filter
        switch (context.labelProps.brand_name) {
          case "ProDrivers":
            bill_pay_filter = [{
							field: 'u_prodrivers_only',
							value: 'yes'
						} ];
            break;
          case "Decca Energy":
          case "Decca Consulting Inc.":
            bill_pay_filter =  [{
							field: 'u_energy_division_only',
							value: 'yes'
						}]; 
            break;
          default:
            bill_pay_filter =  [{
							field: 'u_prodrivers_only',
							value: 'no'
						} ,{
							field: 'u_energy_division_only',
							value: 'no'
						} ]  
        }

        return { bill_pay_filter: bill_pay_filter };
      },
			
			
      assignAccountingUnitData:function (context, event) {
        // Get the results from the API data
        var results = event.value ;
				var dropdownMap = context.dropdownMap;
				
				if (!results[0].branch_name) {
					return console.log ("%cthis isnt right", 'color:yellow', event);
				} 
				
        // Create a dropdown object from the results
        var dropdownObj = results.reduce(function(out, result) {
          out[result.accounting_unit] = result.branch_name;
          return out;
        }, {});
  
				
        // Create an array of accounting units with formatted labels
        var accounting_unit = Object.keys(dropdownObj).map(function(value)  {
					return {
						id: value,
						value: value,
						label: value + " - " + dropdownObj[value],
						field: "accounting_unit",
					}
				});  
				 
				dropdownMap.accounting_unit = accounting_unit;
				
        // Update the dropdownMap in the context with the accounting unit data
        return { 
          dropdownMap: dropdownMap, 
        };
      },
			
			
			assignLocationData: function (context, event) { 
        var results = event.value; 

        // Initialize an object to store the dropdown options
        var dropdownMap = {
          billing_location_ref: [],
          work_location_ref: [],
        };
        var uniqueLocations = [];
				
        // Loop through the results and build the dropdown options
        results.forEach(function (res)  {
          var locationType = res.location_type;
          var selectedLabel =
            locationType === "Billing" ? "billing_location_ref" : "work_location_ref";

          if (!uniqueLocations.includes(res.location_name)) {
						
		        uniqueLocations.push(res.location_name);
						
						dropdownMap[selectedLabel].push({
							id: res.sys_id,
							sublabel: res.sys_id,
							label: res.location_name,
							value: res.location_name,

							// selectedLabel is added to identify the field later
							// for the onChange event of the select or dropdown
							field: selectedLabel,
						});
	        }
					
        });  
				
				return {
          dropdownMap: dropdownMap,
        };
      },
			
			// simple assignments			
			updateAccountList: function(_, event) { 
				return {
					accountList: event.value
				}
			},

			assignHistory: function (_, event) {
			  return {
					billingHistory: event.value
				}
			},
			
      assignSetting: function (context) { 
        return {
          debug: !context.debug,
        };
      },
			
			assignBillingId: function (_, event) {
				return {
					 billing: event.billing,
					 accountId: event.billing.account_number
				}
			},
						
			assignAccountId: function (_, event) {
				return {
					  accountId: event.value,
				}
			},
			
      assignPreviousId: function (_, event) {
				return {
					  previousId: event.value,
				}
			},
			
			
		}
	}
	
	function createGuards() {
		return {
			'viewing prior history': function (context) {
				return Boolean(context.billing);
			}
		}
	}
	
	function createServices() {
		
		/**
		 * Commits the parent record with updated fields
		 * @param {Object} context - The parent context object
		 */
		function commitParent(context) {
			// Filter accountProps to only include fields with an alias
			var fields = machine.context.accountProps.filter(function(f) {
				return !!f.alias;
			});

			// Iterate through each field
			fields.forEach(function(field) {
				// Check if the field alias is 'talent_user'
				// and replace name with sys_id as the value
				if (field.alias === 'talent_user') {
					// Find the talent node with matching full_name
					var node = $scope.talentNames.find(function(item) {
						return item.full_name === field.value;
					});

					// If a matching talent node is found, update the field value with the sys_id
					if (node) {
						field.value = node.sys_id;
					}
				}
			});

			// Add a new field for 'account_number' with the value 
			// from labelProps.account_id
			fields.push({
				alias: 'account_number',
				value: context.accountId
			});

			// Invoke the 'commitParent' resource with the updated fields
			invokeResource('commitParent', onComplete, {
				fields: fields
			});
			shout('Your new miscellaneous billing has been saved');
		}
		
		/**
		 * Commits child data to the server.
		 * @param {Object} context - The context object containing billing properties and previous ID.
		 */
		function commitChild(context) {
			// Filter the billing fields based on whether they have a value in the 
			// context or if the field is "billing_parent"
			var fields = $scope.billing_fields.filter(function(f) {
				return !!context.billingProps[f.field] && f.field !== "billing_parent";
			});

			// Set the value of each field in the fields array to the corresponding value in the context
			fields.forEach(function(item) {
				item.value = context.billingProps[item.field];
			});

			// Add a new field to the fields array with the alias "billing_parent" 
			// and the value of the previous ID in the context
			fields.push({
				alias: 'billing_parent',
				value: context.previousId
			});

			// Invoke the "commitChild" resource with the fields array and the onComplete callback
			invokeResource('commitChild', onComplete, {
				fields: fields
			});
			
			shout('Your new miscellaneous billing has been saved');
		}
		
		/**
		 * Loads the billing history based on the given context.
		 * @param {Object} context - The context object containing the billing information.
		 */
		function loadBillingHistory(context) {
			// Determine the filter based on the context
			var filter = context.billing ? [{
				field: "billing_parent.number",
				value: context.billing.number
			}] : [{
				field: "billing_parent.account_number",
				value: context.labelProps.account_id
			}];

			// Invoke the resource to fetch the billing history
			invokeResource("fetchBillingHistory", onComplete, {
				filter: filter
			});
		}
		
		/**
		 * Loads the landing history by invoking the "fetchLandingHistory" resource.
		 * @param {Object} context - The context object.
		 */
		function loadLandingHistory(context) { 
			// Define the filter object
			var filter = [
				{
					field: "talent_user"
				},
				{
					field: "account_number.account_name"
				}
			];

			// Invoke the "fetchLandingHistory" resource with the filter and onComplete function
			invokeResource("fetchLandingHistory", onComplete, {
				filter: filter
			});
		}		
		
		return {
			commitParent: commitParent,
			commitChild: commitChild,
			loadBillingHistory: loadBillingHistory,
			loadLandingHistory: loadLandingHistory,
			
			fetchPrevious: function (context) {
        invokeResource("fetchPrevious", onComplete, {
					sysId: context.previousId
				});
			},
			fetchAccount: function (context) { 
        invokeResource("fetchAccount", onComplete, {
					sysId: context.accountId
				});
			},
			fetchLocations: function () {
        invokeResource("fetchLocations", onComplete);
			},
			fetchPayCodes: function (context) {
        invokeResource("fetchPayCodes", onComplete, {
					filter: context.bill_pay_filter
				});
			} ,
			getMiscBilling: function (context) {
        invokeResource("fetchMiscBilling", onComplete, {
					billingId: context.billingId
				});
			} ,
			fetchUnit: function (context) {
        invokeResource("fetchUnit", onComplete, {
					accountId: context.labelProps.account_id
				});
			} 
		}
	}
	
  /**
   * HELPERS
   */

  /**
   * Returns an array of page numbers based on the current page and total number of pages.
   * @param {number} currentPage - The current page number.
   * @param {number} totalPages - The total number of pages.
   * @returns {array} - An array of page numbers.
   */
  function getPages(currentPage, totalPages) {
    var pages = [];
    var startPage = Math.max(currentPage - 5, 1);
    var endPage = Math.min(startPage + 9, totalPages);

    // Loop through the range of page numbers and push them to the 'pages' array
    for (var i = startPage; i <= endPage; i++) {
      pages.push(i);
    }

    return pages;
  }

  function exception(content) {
    return [
      { status: "critical", content: content, icon: "circle-exclamation-fill" },
    ];
  }

  /**
   * This code takes the current state of a machine and generates a list of nodes
   * to display in a UI. Each node represents a different aspect of the machine's
   * state and properties.
   */
  function createDebugger() {
    // Get the current state of the machine
    var present = machine.states[$scope.machineState];

    // Check if the current state has any "on" events
    if (present.on) {
      // Generate an array of objects representing the next events
      var nextEvents = Object.keys(present.on).map(function (f) {
        return {
          value: f,
        };
      });

      // Generate an array of objects representing the state properties
      var stateProps = Object.keys($scope.machine.context).map(function (key) {
        return {
          label: key,
          value: JSON.stringify($scope.machine.context[key]),
        };
      });

      // Create an array of nodes to display in the UI
      var nodes = [
        {
          value: $scope.machine.id,
        },
        {
          value: $scope.machine.description,
        },
        {
          label: "State",
          value: $scope.machineState,
          surname: "Events",
          children: nextEvents,
        },
        {
          value:
            $scope.machine.states[$scope.machineState].description ||
            "No description",
        },
        {
          value: "Values",
          children: stateProps,
        },
      ];

      // Set the nodes array in the $scope for use in the UI
      $scope.nodes = nodes;
    }
  }
	
	/**
	 * Displays a message as an alert and clears it after a delay.
	 * @param {string} message - The message to display.
	 */
	function shout(message) {
		// Set the alert text to the given message
		$scope.alertText = message;

		// Clear the alert text after a delay of 3999 milliseconds
		window.setTimeout(function() {
			$scope.alertText = null;
		}, 3999);
	}

	
	
  /**
	DO NOT MODIFY BELOW THIS LINE
	State machine framework
	*/ 
	function createMachine(t){var n,e=t.actions,a=t.guards,r=t.services,o=t.controller,c=$scope.machine;function i(t,e){Array.isArray(t)?s(t.find(function(t){var e=a[t.cond],r=!!e&&Boolean(e(c.context,n));return!t.cond||r}),e):s(t,e)}function s(t,a){var o="object"==typeof n?n:{},s=u(o,{data:a}),v={context:c.context};function x(t){if(Array.isArray(t))t.forEach(function(t){var n=(0,e[t.type])(v.context,s);v.context=u(v.context,n)}),f(v.context);else{var n=(0,e[t.type])(v.context,s);v.context=u(v.context,n),f(v.context)}}c.states[c.state].exit&&x(c.states[c.state].exit),Boolean(t.target)&&($scope.machineState=t.target),t.actions&&x(t.actions);var h=c.states[t.target];h&&(h.entry&&x(h.entry),h.invoke&&function t(e,a){var o=r[e.src];if(o)try{var c=o(a,n);if(e.onDone)return i(e.onDone,c)}catch(s){if(e.onError)return i(e.onError,s)}}(h.invoke,v.context),h.always&&i(h.always))}function f(t){var n=u(c.context,t);c.context=n,$scope.machine=c}function u(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e]);return t}return o.matches=function(t){return Array.isArray(t)?t.some(function(t){return $scope.machineState===t}):$scope.machineState===t},o.can=function(t){var n=$scope.machine.states[$scope.machineState];if(n.on)return Boolean(n.on[t])},o.send=function(t){var e=t.type||t;c.state=$scope.machineState,function t(e,a){var r=c.states[$scope.machineState];if(n=a,r){var o=r.on[e]||c.on[e];o&&i(o)}}(e,t)},o}

};]]></client_script>
        <controller_as>c</controller_as>
        <css>.misc-grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: auto;
  padding: 1rem;
  gap: 1rem;
  background-color: #e0e0e0;
  border-radius: .25rem; 
}

.btn-chong {
  color: #003071;
  border-radius: 2rem; 
  font-weight: 600;
}

.btn-chong.btn-primary {
  color: #003071;
  border-color: #00eebb; 
  background-color: #00eebb; 
  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.25), 0px 4px 4px rgba(0, 0, 0, 0.25);
}

.btn-chong.active {
  box-shadow: 0;
  font-weight: 400;
}

.btn-chong.btn-primary:disabled,
.btn-chong:disabled {
  background-color: #e4e4e4; 
  border-color: #e4e4e4; 
  color: gray; 
  box-shadow: none;
  opacity: 0.5; /* reduce opacity to indicate disabled state */
  cursor: not-allowed; /* change cursor to indicate button cannot be clicked */
  /* add any other styles as desired */
}



.misc-billing-search-form {
  background-color: #f0f0f0;
  padding: 1rem;
}

.misc-foot {
  margin: 1rem 0; 
  gap: 1rem;
}

td, th {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.misc-foot.align-right {
  text-align: right;
}

.breadcrumb {
  width: 100%;
}

.deduction-flex {
  width: 100%;
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem 0;
}


.deduction-flex hr {
  width: 40%; 
}



.deduction-flex.step {
  width: 280px;
  white-space: nowrap; 
  color: #000;
}


.deduction-flex.current { 
  font-weight: 600;
  color: #003071;
} 

.deduction-flex.complete {  
  color: gray;
} 

.deduction-flex.step div {
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%; 
  width: 32px;
  height: 32px;
  
  /* default colors */
  background-color: #fff; 
  border: solid 2px gray;
}


.deduction-flex.step.complete div { 
  
  
  /* complete colors */
  background-color: #fff; 
  border: solid 2px #00eebb; 
}

.deduction-flex.step.current div { 
  
  
  /* current colors */
  background-color: #e9f5fe; 
  border: solid 2px #003071;
}


.deduction-flex.step i {  
  display: none
}

.deduction-flex.step span {  
  font-weight: 600;
  color: #003071;
}

.deduction-flex.step.complete span { 
  display: none; 
}

.deduction-flex.step.complete i { 
  display: block
}



.deduction-flex.between { 
  justify-content: space-between;
}

.deduction-flex.start { 
  align-items: flex-start;
}

.deduction-flex.center { 
  justify-content: center;
}

.deduction-flex.stepper {
  gap: 0;  
}
 

.misc-form { 
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: auto;
  padding: 0;
  gap: 1rem; 
}
  
.misc-form.single {
  grid-template-columns: 1fr;
  outline-offset: 2px; 
}
  
.distant {
  margin: 2rem 0; 
}</css>
        <data_table>sp_instance</data_table>
        <demo_data>{
	"hello": "world"
}</demo_data>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>misc_billing_poc</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Misc Billing POC</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() { 
	
	// SERVICE METHODS
	
	/**
	 * Fetches account data using a resource and input sysId.
	 * @returns {void}
	 */
	function fetchAccount() {
		// Create a resource with the specified table and fields
		var resource = createResource('x_ebh_ccde_accounts_data', 
		  ["account_name", "account_id", "branch_name",
			 "accounting_unit", "brand_name", "brand_level", 
			 "sys_id", "branch_number"]);

		// Execute the resource with the specified filter
		data.message = resource.execute([{
				field: "sys_id",
				value: input.sysId
			}]);
	}	
	 
	/**
	 * Fetches pay codes from a resource and assigns the result to the data.message variable.
	 */
	function fetchPayCodes() {
		// Create a resource object for the 'u_bill_pay_types' resource with the specified fields.
		var resource = createResource('u_bill_pay_types', ['u_code', 'u_name']);

		// Execute the resource with the provided filter and assign the result to data.message.
		data.message = resource.execute(input.filter);
	}
	
	/**
	 * Fetches the previous billing entry resource based on the given sysId.
	 * @param {string} sysId - The sysId of the current billing entry.
	 * @returns {object} - The previous billing entry resource.
	 */
	function fetchPrevious(sysId) {
		// Create a resource object for the 'x_ebh_billing_pa_0_billing_entry' table with the 'number' field.
		var resource = createResource('x_ebh_billing_pa_0_billing_entry', ['number']);

		// Execute the resource with the sysId as a filter.
		data.message = resource.execute([{
			field: 'sys_id',
			value: sysId
		}]); 
	}	
	
	/**
	 * Commits the parent resource by inserting the fields into the 'x_ebh_billing_pa_0_billing_entry' table.
	 */
	function commitParent() {
		// Create a resource object for 'x_ebh_billing_pa_0_billing_entry'
		var resource = createResource('x_ebh_billing_pa_0_billing_entry');

		// Insert the fields into the resource and assign the result to the 'message' property of the 'data' object
		data.message = resource.insert(input.fields);
	}
	
	/**
	 * Commits a child resource by creating a new resource and inserting data into it.
	 */
	function commitChild() {
		// Create a new child resource
		var resource = createResource('x_ebh_billing_pa_0_branch_account_billing');

		// Insert data into the child resource 
		data.message = resource.insert(input.fields); 
	}
 
	function fetchBillingHistory () { 
		var resource = createResource('x_ebh_billing_pa_0_branch_account_billing', 
					 ['number', 'bill_type', 'qty', 'bill_rate', 'total',
						'sys_created_on','sys_created_by',
						'status', 'invoice_date', 'week_ending_date']);
   
		data.message = resource.execute(input.filter);  
	}
 
	function fetchLandingHistory() {
		var resource = createResource('x_ebh_billing_pa_0_billing_entry', 
		  	['account_number*account_name', 'account_number', 'number', 'bill_type', 'status', 'job_order',
			 	'accounting_unit', 'work_location','sys_created_by', 'billing_location', 'talent_user*employee',
				'last_misc_billing_date*start_date']); 
		
		
		data.message = resource.execute(input.filter);
	}
	
	/**
	 * Fetches the unit data from the 'x_ebh_ccde_accounts_data' resource.
	 */
	function fetchUnit() {
		// Create a resource object for 'x_ebh_ccde_accounts_data' with the specified fields.
		var resource = createResource('x_ebh_ccde_accounts_data', 
				['accounting_unit', 'branch_name']);

		// Execute the resource with the specified field values.
		data.message = resource.execute([
			{
				// return only records where accounting_unit is not null
				field: "accounting_unit"
			}
		]); 
	}
	
	/**
	 * Fetches locations from the 'x_ebh_ccde_client_location' table
	 * and stores the result in the 'data.message' variable.
	 */
	function fetchLocations() {
		// Create a resource object for the 'x_ebh_ccde_client_location' table
		var resource = createResource('x_ebh_ccde_client_location', 
			['sys_id', 'location_name', 'street_address', 'location_type']);

		// Execute the resource and store the result in 'data.message'
		data.message = resource.execute();
	}
	
	/**
		 * Finds talent based on a given parameter.
		 * @param {string} param - The parameter to search for.
		 * @returns {boolean} - True if talent is found, false otherwise.
		 */
	function findTalent() { 
		// Create a resource for talent
		var resource = createResource('x_ebh_ccde_talent_core', 
					['sys_id', 'full_name', 'enterprise_talent_id', 'status_crm']);

		// Execute the talent resource with the given parameter
		data.message = resource.execute([{
			field: 'full_name',
			value: input.param,
			operator: 'CONTAINS'
		}]);  
	}
	 
	
	function findAccount() {  
		// Create a resource for talent
		var resource = createResource('x_ebh_ccde_accounts_data', 
				 [ 'account_name', 'account_id', 
				   'sys_id',	'brand_name', 'branch_name' ]); 
		
		// Execute the talent resource with the given parameter
		data.message = resource.execute([{
			field: 'account_name',
			value: input.param,
			operator: 'CONTAINS'
		}]); 
	}
	
	
	
	var requestMethods = {
		fetchAccount: fetchAccount,
		fetchPayCodes: fetchPayCodes,
		fetchPrevious: fetchPrevious, 
		commitParent: commitParent, 
		commitChild: commitChild, 
		fetchUnit: fetchUnit,  
		fetchLocations: fetchLocations, 
		findTalent: findTalent, 
		findAccount:findAccount,
		fetchBillingHistory: fetchBillingHistory,
		fetchLandingHistory:fetchLandingHistory,
		loadAppJson: function () {
			data.object = loadAppJson();
		} 
	}
	
  // execute the requested method if there is one
  if (input) {
    var actionName = input.actionName;
    var requestMethod = requestMethods[actionName];
    if (requestMethod) { 
      return requestMethod();
    }
  }
	
	// load some initial talent names for the dropdown 
	var resource = createResource('x_ebh_ccde_talent_core', 
				['sys_id', 'full_name', 'enterprise_talent_id', 'status_crm']);
	data.talent = resource.execute() ; 
	
	return;
	
	 
 
	/**
	 * Loads the JSON data for the Misc Billing app.
	 * @returns {Object} - The JSON data for the app.
	 */
	function loadAppJson() {
		// Key for the Misc Billing app
		var APP_ID = "75cccd9247566d10265ad698436d439c";

		// Create a resource object with the specified table and fields
		var resource = createResource('x_ebh_ccde_application_json', ['title', 'content']);

		// Execute the resource with the application filter
		var response = resource.execute([{
			field: 'application',
			value: APP_ID
		}]);

		// Create an empty object to store the JSON data
		var object = {};

		// Iterate over the response rows and parse the content as JSON
		response.forEach(function(row) {
			object[row.title] = JSON.parse(row.content);
		});

		// Return the object containing the JSON data
		return object;
	}

  /**
	 * Creates a resource object with insert and execute methods
	 * @param {string} table - The name of the table to interact with
	 * @param {Array} fields - The fields to include in the resource object
	 * @returns {Object} - The resource object
	 */
	function createResource(table, fields) {
		return {
			fields: fields,

			/**
			 * Inserts a new record into the table
			 * @param {Array} fields - The fields to insert
			 * @returns {string} - The sys_id of the inserted record
			 */
			insert: function(fields) {
				var gr = new GlideRecord(table);

				fields.forEach(function(item) {
					gr[item.alias || item.field] = item.value;
				});

				// Insert the new record into the table
				return gr.insert();
			},
 
			/**
			 * Executes a query on the table and returns the matching records
			 * @param {Array} conditions - The conditions to apply to the query
			 * @returns {Array} - The matching records
			 */
			execute: function(conditions, limit) {
				var gr = new GlideRecord(table);

				if (conditions) {
					conditions.forEach(function(condition) {
						if (condition.operator) {
							gr.addQuery(condition.field, condition.operator, condition.value);
						} else if (condition.value) {
							gr.addQuery(condition.field, condition.value);
						} else {
							console.log ({nn: condition.field})
							gr.addNotNullQuery(condition.field);
						}
					});
				}

				// Order the records by descending sys_created_on field by default
				// TODO: add variable sorting
				gr.orderByDesc('sys_created_on');

				// setting a limit for sanity
				gr.setLimit(limit || 200);
				gr.query();

				var records = [];

				// Iterate through each record in the GlideRecord
				while (gr.next()) {
					var record = {};
					this.fields.forEach(function(field) {
						if (field.indexOf('*') > 0) {
							// handle aliasing for displayValue fields
							var label = field.split('*');  
							record[label[1]] = gr.getDisplayValue(label[0]);
							return;
						}
						record[field] = gr.getValue(field);
					});
					records.push(record);
				} 
				
				return records;
			}
		};
	}
	 
	
	
	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>Milton.Jones@employbridge.com</sys_created_by>
        <sys_created_on>2023-11-24 20:37:56</sys_created_on>
        <sys_id>cc8b8090c3beb51011971d4ce001318b</sys_id>
        <sys_mod_count>826</sys_mod_count>
        <sys_name>Misc Billing POC</sys_name>
        <sys_package display_value="Voluntary Deductions" source="x_ebh_voluntary_0">591c37a24729a110265ad698436d431e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Voluntary Deductions">591c37a24729a110265ad698436d431e</sys_scope>
        <sys_update_name>sp_widget_cc8b8090c3beb51011971d4ce001318b</sys_update_name>
        <sys_updated_by>Milton.Jones@employbridge.com</sys_updated_by>
        <sys_updated_on>2023-12-14 17:49:11</sys_updated_on>
        <template><![CDATA[<div>
  
  
   <div ng-include="'breadcrumbs.html'" ng-include-opts="{
			machine: machine,
			c: c
		}"></div>
   
  <!-- 'stepper' component -->
  <div class="deduction-flex stepper" ng-if="c.matches(stepperStates)">
    <div
      class="deduction-flex step"
      ng-repeat="step in stepperTabs"
      ng-class="{'complete': c.matches(step.complete), 'current': c.matches(step.current)}"
    >
      <div>
        <i class="glyphicon glyphicon-ok" />
        <span>{{$index + 1}}</span>
      </div>
      {{step.label}}
      <hr class="right" />
    </div>
  </div>

  
  <div ng-if="alertText" class="alert alert-success" role="alert">
    {{alertText}}
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
  
  
  <!-- STATE: new misc billing
    new misc billing page -->
  <widget id="machine_new_misc_billing_search"></widget> 

  <!-- STATE: viewing landing page
    misc billing landing page  -->
  <!-- <widget id="machine_misc_billing_grid"></widget>  
  
  
  pagination shows whenever 'page' event is available
  <widget id="machine_pagination" ></widget>  
  -->
  
  
  <div ng-if="c.matches('viewing landing page')"> 
    <div class="deduction-flex between">
      <h2>Miscellaneous Billing</h2>

      <button type="button" ng-click="c.send('create')" class="btn btn-primary">
        ADD NEW MISC. BILLING
      </button>
    </div>
    
    <widget id="machine_data_grid"   
          options="{
            method: 'openBilling', 
            title: 'History',
            table: 'x_ebh_billing_pa_0_billing_entry',
            index: 0,  
            message: 'There are no items to display',
            search_fields: 'account_number.account_name,account_number.account_id',
            columns: 'account_number.account_name,account_number.account_id,account_number.brand_name,account_number.branch_name,bill_type,last_misc_billing_date,status'
          }"
    ></widget>  
  
    
  </div> 
  
  
  
  
 <!-- STATE: editing misc billing parent
    misc billing parent add new button -->
  <div class="misc-foot align-right">
    <button
      ng-if="c.can('add')"
      type="button"
      ng-click="c.send('add')"
      class="btn btn-sm btn-chong btn-primary"
    >
      ADD NEW ITEM
    </button>
  </div>

  <!-- STATE: editing misc billing parent
    misc billing parent form -->
  <div
    class="misc-grid top-level-grid"
    ng-if="machine.context.accountProps && !c.can('create')"
  >
    <div ng-repeat="field in machine.context.accountProps">
      <div><b>{{field.label}} </b></div>

      <div
        ng-if="(!field.select && !field.text) || !c.matches('editing misc billing parent')"
      >
        <span ng-if="!field.search">{{field.value}}</span>
        <span ng-if="field.search">{{talentName || field.value}}</span>
      </div>

      <div ng-if="c.matches('editing misc billing parent')">
        <div ng-if="field.select && !field.date && !field.search">
          <input
            class="form-control"
            ng-change="c.send({type:'change billing', field: field.field, value: field.value})"
            ng-model="field.value"
            list="datalist{{field.field}}"
            id="{{field.field}}DataList"
            placeholder="Select {{field.label}}..."
          />
          <datalist id="datalist{{field.field}}">
            <option
              ng-repeat="item in machine.context.dropdownMap[field.field]"
              value="{{item.label}}"
            >
              {{item.sublabel}}
            </option>
          </datalist>
        </div>

        <div ng-if="field.search">
          <input
            ng-change="c.findTalent(field.value)"
            class="form-control form-control-sm"
            ng-model="field.value"
            list="datalistTalent"
            id="talentDataList"
            placeholder="Type to search..."
          />
          <datalist id="datalistTalent">
            <option ng-repeat="item in talentNames" value="{{item.full_name}}">
              EID {{item.enterprise_talent_id}}, Status: {{item.status_crm}}
            </option>
          </datalist>
        </div>
        <div ng-if="field.date || field.text">
          <input
            ng-change="c.send({type:'change billing', field: field.field, value: field.value})"
            class="form-control form-control-sm"
            ng-model="field.value"
            type="{{field.date ? 'date' : 'text'}}"
            placeholder="{{field.label}}"
          />
        </div>
      </div>
    </div>
  </div>

  <!-- STATE: editing misc billing parent
    new misc billing save button -->
  <div class="misc-foot" ng-if="c.matches('editing misc billing parent')">
    <button
      ng-disabled="machine.context.invalid"
      ng-if="c.can('next')"
      ng-click="c.send('next')"
      type="button"
      class="btn btn-sm btn-chong btn-primary"
    >
      SAVE DETAILS
    </button>
  </div>

  
  
  <!-- STATE: editing new misc billing
    new misc billing form -->
  <div ng-if="c.matches('editing new misc billing')">
    <div class="deduction-flex between">
      <h4>New Misc. Billing Item</h4>

      <button
        ng-if="c.can('remove')"
        type="button"
        ng-click="c.send('remove')"
        class="btn btn-sm btn-chong btn-primary"
      >
        DELETE ITEM
      </button>
    </div>
    
    
    <div> 
      
      <div ng-if="!item.hidden" ng-repeat="section in billing_fields" class="misc-form" ng-class="{ single: section.columns === 1 }">
        
        <div ng-if="!item.hidden" ng-repeat="item in section.fields">
          <label class="form-label">{{item.label}}</label>
          <input
            ng-disabled="item.readonly"
            ng-blur="c.send({type:'change item', field: item.field, value: machine.context.billingProps[item.field]})"
            class="form-control"
            placeholder="{{item.tooltip}}"
            list="datalist{{item.field}}"
            id="{{item.field}}DataList"
            ng-model="machine.context.billingProps[item.field]"
            type="{{item.date ? 'date' : 'text'}}"
          />

          <datalist
            ng-if="machine.context.dropdownMap[item.field]"
            id="datalist{{item.field}}"
          >
            <option
              ng-repeat="node in machine.context.dropdownMap[item.field]"
              value="{{node.label}}"
            >
              {{node.sublabel}}
            </option>
          </datalist>
        </div>
      </div>
      
      
    </div>

    <div class="misc-foot">
      <label class="form-label">Invoice Note</label>
      <input
        ng-change="c.send({type:'change item', field: 'invoice_note', value: machine.context.billingProps.invoice_note})"
        class="form-control"
        placeholder="Notes"
        ng-model="machine.context.billingProps.invoice_note"
      />
    </div>

    <div class="misc-foot align-right">
      <button
        ng-disabled="machine.context.invalidBilling"
        ng-if="c.can('next')"
        type="button"
        ng-click="c.send('next')"
        class="btn btn-sm btn-chong btn-primary"
      >
        SAVE ITEM
      </button>
    </div>
  </div>

  
  
  
  
  
  
  
  
  
  
  
  
  
  <!-- STATE: confirm inputs 
    misc. billing confirm inputs section -->
  <div ng-if="c.matches('confirm inputs')">
    
    <div class="misc-foot align-right">
      <button
        type="button"
        ng-click="c.send('cancel new item')"
        class="btn btn-sm btn-chong"
      >
        EDIT
        <i class="glyphicon glyphicon-pencil" />
      </button> 
      <button
        type="button"
        ng-click="c.send('cancel new item')"
        class="btn btn-sm btn-chong"
      >
        DELETE
        <i class="glyphicon glyphicon-trash" />
      </button> 
    </div>
    
    <div class="misc-form distant">
      <div ng-if="item.review" ng-repeat="item in billing_fields">
        <label class="form-label"><b>{{item.label}}</b></label>
        <div>{{machine.context.billingProps[item.field]}}</div>
      </div>
    </div>

    <div class="misc-foot align-right"> 
      <button
        type="button"
        ng-click="c.send('next')"
        class="btn btn-sm btn-chong btn-primary"
      >
        SAVE ITEM
      </button>
    </div>
  </div>

  
  
  
  
  
  
  
  
  
  
  
  <!-- STATE: editing new misc billing | 
    misc. billing items history list -->
  <div
    class="distant"
    ng-if="!c.can('create') && !c.matches('viewing landing page')"
  >
    <h3>History</h3>

    <div ng-if="!machine.context.billingHistory.length">
      There are no misc. billing items for this branch.
    </div>

    <table class="table" ng-if="machine.context.billingHistory.length">
      <thead>
        <tr>
          <th scope="col">Billing Item #</th>
          <th scope="col">Bill Type</th>
          <th scope="col">Qty</th>
          <th scope="col">Bill Rate</th>
          <th scope="col">Total</th>
          <th scope="col">Week Ending Date</th>
          <th scope="col">Invoice Date</th>
          <th scope="col">Created On</th>
          <th scope="col">Created by</th>
          <th scope="col">Status</th>
        </tr>
      </thead>
      <tbody>
        <tr ng-repeat="item in machine.context.billingHistory">
          <td
            scope="row"
            ng-click="c.send({type: 'create', value: account.sys_id})"
          >
            <a href="#">{{item.number}}</a>
          </td>
          <td>{{item.bill_type}}</td>
          <td>{{item.qty}}</td>
          <td>{{item.bill_rate}}</td>
          <td>{{item.total}}</td>
          <td>{{item.week_ending_date}}</td>
          <td>{{item.invoice_date}}</td>
          <td>{{item.sys_created_on}}</td>
          <td>{{item.sys_created_by}}</td>
          <td>{{item.status}}</td>
        </tr>
      </tbody>
    </table>
  </div>

  
  
  
  
  
  
  
  <ul ng-if="machine.context.debug">
    <li ng-repeat="node in nodes">
      <b ng-if="node.label">{{node.label}}: </b>

      {{node.value}}

      <ul ng-if="node.children">
        <li ng-if="node.surname"><b>{{node.surname}}</b></li>
        <li
          ng-class="{'indented': node.surname}"
          ng-repeat="kid in node.children"
        >
          <b ng-if="kid.label">{{kid.label}}: </b>
          {{kid.value}}
        </li>
      </ul>
    </li>
  </ul>
  
  
  
   
  
  
<script type="text/ng-template" id="breadcrumbs.html">
   
  <div class="deduction-flex start">
    <button
      ng-click="c.send('change setting');c.createDebugger();"
      class="btn btn-secondary glyphicon glyphicon-menu-hamburger"
      ng-class="{'btn-primary': machine.context.debug}"
    ></button>
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="#">Apps</a></li>
      <li class="breadcrumb-item">
        <a
          ng-click="c.send('home')"
          ng-if="!c.matches('viewing landing page')"
          href="#"
          >Miscellaneous Billing</a
        >
        <span ng-if="c.matches('viewing landing page')"
          >Miscellaneous Billing</span
        >
      </li>
      <li class="breadcrumb-item" ng-if="!c.matches('viewing landing page')">
        <a
          ng-if="!c.matches('new misc billing')"
          ng-click="c.send('add new')"
          href="#"
          >Add New Miscellaneous Billing</a
        >
        <span ng-if="c.matches('new misc billing')"
          >Add New Miscellaneous Billing</span
        >
      </li>
      <li
        class="breadcrumb-item"
        ng-if="machine.context.labelProps.account_name && !c.matches('new misc billing')"
      >
        {{machine.context.labelProps.account_name}}
      </li>
    </ol>
  </div> 
  
</script>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
</div>
]]></template>
    </sp_widget>
</record_update>
